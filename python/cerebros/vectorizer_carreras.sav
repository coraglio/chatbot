{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 240,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import nltk\n",
    "nltk.__version__\n",
    "import sklearn\n",
    "from sklearn.feature_extraction.text import CountVectorizer,TfidfVectorizer\n",
    "import pickle"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 241,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>sinonimos</th>\n",
       "      <th>carreras</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>mercadotecnia</td>\n",
       "      <td>marketing</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>mercadeo</td>\n",
       "      <td>marketing</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>comercial</td>\n",
       "      <td>marketing</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>e-comerce</td>\n",
       "      <td>marketing</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>marketin</td>\n",
       "      <td>marketing</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>314</th>\n",
       "      <td>pensamiento logico</td>\n",
       "      <td>Logistica</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>315</th>\n",
       "      <td>agro</td>\n",
       "      <td>Agro</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>316</th>\n",
       "      <td>agronegocios</td>\n",
       "      <td>Agro</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>317</th>\n",
       "      <td>agricultura</td>\n",
       "      <td>Agro</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>318</th>\n",
       "      <td>ganaderia</td>\n",
       "      <td>Agro</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>319 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "              sinonimos   carreras\n",
       "0         mercadotecnia  marketing\n",
       "1              mercadeo  marketing\n",
       "2             comercial  marketing\n",
       "3             e-comerce  marketing\n",
       "4              marketin  marketing\n",
       "..                  ...        ...\n",
       "314  pensamiento logico  Logistica\n",
       "315                agro       Agro\n",
       "316        agronegocios       Agro\n",
       "317         agricultura       Agro\n",
       "318           ganaderia       Agro\n",
       "\n",
       "[319 rows x 2 columns]"
      ]
     },
     "execution_count": 241,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.set_option('max_colwidth', 100)\n",
    "df_original=pd.read_csv('carreras01.csv', sep=';', encoding='latin-1')\n",
    "df_original"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 242,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['marketing', 'rrpp', 'Gestión Contable y Financiera', 'Admin',\n",
       "       'Rob', 'Diseño Grafico', 'rrhh', 'Comercio Internacional',\n",
       "       'turismo', 'Agro', 'publicidad', 'multimedios',\n",
       "       'inteligencia artificial', 'svirt', 'Logistica',\n",
       "       'higiene y seguridad'], dtype=object)"
      ]
     },
     "execution_count": 242,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_original.carreras.unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 243,
   "metadata": {},
   "outputs": [],
   "source": [
    "corpus=df_original.sinonimos\n",
    "stopwords=['de','en','que', 'la', 'los','que','son','las','el','con','para','a', 'cuando','como','quiero','estudiar','algo']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 244,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['accionistas',\n",
       " 'acercar',\n",
       " 'administracion',\n",
       " 'administrar',\n",
       " 'aduana',\n",
       " 'agricultura',\n",
       " 'agro',\n",
       " 'agronegocios',\n",
       " 'ai',\n",
       " 'al',\n",
       " 'alcance',\n",
       " 'alcanzar',\n",
       " 'ambientalidad',\n",
       " 'analisis',\n",
       " 'analitics',\n",
       " 'anuncios',\n",
       " 'aparatos',\n",
       " 'aprendizaje',\n",
       " 'arte',\n",
       " 'artes',\n",
       " 'artificial',\n",
       " 'asesor',\n",
       " 'asistente',\n",
       " 'atraccion',\n",
       " 'audiovisual',\n",
       " 'audiovisuales',\n",
       " 'automatico',\n",
       " 'automatizacion',\n",
       " 'automatizar',\n",
       " 'balances',\n",
       " 'bienes',\n",
       " 'big',\n",
       " 'boceto',\n",
       " 'buena',\n",
       " 'campanas',\n",
       " 'campo',\n",
       " 'capital',\n",
       " 'caracterizacion',\n",
       " 'carteleria',\n",
       " 'ceremonial',\n",
       " 'ci',\n",
       " 'ciencias',\n",
       " 'cine',\n",
       " 'cliente',\n",
       " 'clientes',\n",
       " 'com',\n",
       " 'comerce',\n",
       " 'comercial',\n",
       " 'comerciales',\n",
       " 'comercio',\n",
       " 'comprador',\n",
       " 'compradores',\n",
       " 'computadoras',\n",
       " 'comunicacion',\n",
       " 'comunicaciones',\n",
       " 'comunicados',\n",
       " 'comuniccaion',\n",
       " 'construyen',\n",
       " 'consumidor',\n",
       " 'contabilidad',\n",
       " 'contable',\n",
       " 'contenidos',\n",
       " 'control',\n",
       " 'controlar',\n",
       " 'coordinador',\n",
       " 'cosecha',\n",
       " 'creacion',\n",
       " 'crear',\n",
       " 'creatividad',\n",
       " 'credito',\n",
       " 'cuentas',\n",
       " 'cultivos',\n",
       " 'cumplimiento',\n",
       " 'cumplir',\n",
       " 'dar',\n",
       " 'data',\n",
       " 'datos',\n",
       " 'debe',\n",
       " 'del',\n",
       " 'desarrollar',\n",
       " 'difundir',\n",
       " 'difusion',\n",
       " 'digitales',\n",
       " 'digitalizacion',\n",
       " 'dinero',\n",
       " 'disenador',\n",
       " 'disenar',\n",
       " 'diseno',\n",
       " 'disenos',\n",
       " 'dramatica',\n",
       " 'economia',\n",
       " 'efectos',\n",
       " 'eficiencia',\n",
       " 'elementos',\n",
       " 'emprendedor',\n",
       " 'emprendimiento',\n",
       " 'empreresa',\n",
       " 'empresa',\n",
       " 'empresarial',\n",
       " 'empresariales',\n",
       " 'empresas',\n",
       " 'especiales',\n",
       " 'estado',\n",
       " 'estetico',\n",
       " 'estilo',\n",
       " 'estrategia',\n",
       " 'estrategias',\n",
       " 'estudio',\n",
       " 'eventos',\n",
       " 'experiencia',\n",
       " 'exportaciones',\n",
       " 'exterior',\n",
       " 'exteriores',\n",
       " 'facilitar',\n",
       " 'financiera',\n",
       " 'finanzas',\n",
       " 'fortalecer',\n",
       " 'gamificacion',\n",
       " 'ganaderia',\n",
       " 'gerente',\n",
       " 'gestion',\n",
       " 'gestionar',\n",
       " 'grafica',\n",
       " 'graficas',\n",
       " 'grafico',\n",
       " 'graficos',\n",
       " 'grafismo',\n",
       " 'granos',\n",
       " 'haber',\n",
       " 'hacienda',\n",
       " 'herramientas',\n",
       " 'higiene',\n",
       " 'humana',\n",
       " 'humanidades',\n",
       " 'humano',\n",
       " 'humanos',\n",
       " 'ia',\n",
       " 'imagen',\n",
       " 'impacto',\n",
       " 'importaciones',\n",
       " 'impresion',\n",
       " 'impuestos',\n",
       " 'industria',\n",
       " 'industriales',\n",
       " 'informacion',\n",
       " 'ingenieria',\n",
       " 'inrernacional',\n",
       " 'int',\n",
       " 'inteligencia',\n",
       " 'intelligence',\n",
       " 'internacional',\n",
       " 'internacionales',\n",
       " 'interno',\n",
       " 'inversionistas',\n",
       " 'isologotipos',\n",
       " 'laboral',\n",
       " 'learning',\n",
       " 'lenguaje',\n",
       " 'liderazgo',\n",
       " 'llegar',\n",
       " 'lobby',\n",
       " 'loby',\n",
       " 'logico',\n",
       " 'logistica',\n",
       " 'machine',\n",
       " 'maiz',\n",
       " 'manejo',\n",
       " 'mangement',\n",
       " 'maquinas',\n",
       " 'marcas',\n",
       " 'marketin',\n",
       " 'mas',\n",
       " 'mayor',\n",
       " 'mecatronica',\n",
       " 'medio',\n",
       " 'medios',\n",
       " 'mejorar',\n",
       " 'mensajeria',\n",
       " 'mensajes',\n",
       " 'mercadeo',\n",
       " 'mercado',\n",
       " 'mercadotecnia',\n",
       " 'mi',\n",
       " 'mineria',\n",
       " 'minimalista',\n",
       " 'ml',\n",
       " 'modelizacion',\n",
       " 'motivacion',\n",
       " 'movimientos',\n",
       " 'multimedia',\n",
       " 'mundial',\n",
       " 'natural',\n",
       " 'negocio',\n",
       " 'negocios',\n",
       " 'numeros',\n",
       " 'obligaciones',\n",
       " 'operativa',\n",
       " 'organizacion',\n",
       " 'organizar',\n",
       " 'pagar',\n",
       " 'partes',\n",
       " 'patrimonio',\n",
       " 'pensamiento',\n",
       " 'percepcion',\n",
       " 'persona',\n",
       " 'personal',\n",
       " 'personas',\n",
       " 'piezas',\n",
       " 'pixelado',\n",
       " 'planes',\n",
       " 'planificacion',\n",
       " 'planificar',\n",
       " 'plata',\n",
       " 'pnl',\n",
       " 'politica',\n",
       " 'por',\n",
       " 'preferencia',\n",
       " 'prevencion',\n",
       " 'prevision',\n",
       " 'procesos',\n",
       " 'produccion',\n",
       " 'producir',\n",
       " 'productividad',\n",
       " 'producto',\n",
       " 'productos',\n",
       " 'programacion',\n",
       " 'programar',\n",
       " 'promocionar',\n",
       " 'promotor',\n",
       " 'propaganda',\n",
       " 'propagandas',\n",
       " 'proteccion',\n",
       " 'protocolo',\n",
       " 'provision',\n",
       " 'proyectar',\n",
       " 'publicas',\n",
       " 'publicidad',\n",
       " 'publicitaria',\n",
       " 'publicitarias',\n",
       " 'publicitario',\n",
       " 'publico',\n",
       " 'python',\n",
       " 'realizar',\n",
       " 'rec',\n",
       " 'reconocimiento',\n",
       " 'recursos',\n",
       " 'redaccion',\n",
       " 'redes',\n",
       " 'relacion',\n",
       " 'relaciones',\n",
       " 'relacionista',\n",
       " 'rentabilidad',\n",
       " 'representante',\n",
       " 'responsabilidad',\n",
       " 'riesgos',\n",
       " 'robotica',\n",
       " 'robotics',\n",
       " 'robots',\n",
       " 'rp',\n",
       " 'rrhh',\n",
       " 'rrpp',\n",
       " 'salubridad',\n",
       " 'sanidad',\n",
       " 'science',\n",
       " 'seguimiento',\n",
       " 'seguridad',\n",
       " 'seleccion',\n",
       " 'servicio',\n",
       " 'servicios',\n",
       " 'siembra',\n",
       " 'silos',\n",
       " 'simulacion',\n",
       " 'sistemas',\n",
       " 'sobre',\n",
       " 'social',\n",
       " 'sociedad',\n",
       " 'soja',\n",
       " 'talento',\n",
       " 'tecnica',\n",
       " 'tecnologicos',\n",
       " 'television',\n",
       " 'tipografia',\n",
       " 'trabajadores',\n",
       " 'trabajo',\n",
       " 'transacciones',\n",
       " 'tributarias',\n",
       " 'tridimensional',\n",
       " 'trigo',\n",
       " 'turismo',\n",
       " 'turistas',\n",
       " 'turistica',\n",
       " 'una',\n",
       " 'vendedor',\n",
       " 'venta',\n",
       " 'ventas',\n",
       " 'viajar',\n",
       " 'viaje',\n",
       " 'viajes',\n",
       " 'videojuegos',\n",
       " 'vinculo',\n",
       " 'virtual',\n",
       " 'visibilidad',\n",
       " 'visual',\n",
       " 'visuales']"
      ]
     },
     "execution_count": 244,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "vectorizerTfidf = TfidfVectorizer(binary=False, strip_accents='unicode', stop_words=stopwords)\n",
    "X_Tfidf = vectorizerTfidf.fit_transform(corpus)\n",
    "vocabulario=vectorizerTfidf.get_feature_names()\n",
    "vocabulario"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 245,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "304"
      ]
     },
     "execution_count": 245,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(vocabulario)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 246,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_Tfidf.toarray()\n",
    "df_X_Tfidf=pd.DataFrame(X_Tfidf.toarray(), columns=vectorizerTfidf.get_feature_names())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 247,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>sinonimos</th>\n",
       "      <th>carreras</th>\n",
       "      <th>accionistas</th>\n",
       "      <th>acercar</th>\n",
       "      <th>administracion</th>\n",
       "      <th>administrar</th>\n",
       "      <th>aduana</th>\n",
       "      <th>agricultura</th>\n",
       "      <th>agro</th>\n",
       "      <th>agronegocios</th>\n",
       "      <th>...</th>\n",
       "      <th>ventas</th>\n",
       "      <th>viajar</th>\n",
       "      <th>viaje</th>\n",
       "      <th>viajes</th>\n",
       "      <th>videojuegos</th>\n",
       "      <th>vinculo</th>\n",
       "      <th>virtual</th>\n",
       "      <th>visibilidad</th>\n",
       "      <th>visual</th>\n",
       "      <th>visuales</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>mercadotecnia</td>\n",
       "      <td>marketing</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>mercadeo</td>\n",
       "      <td>marketing</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>comercial</td>\n",
       "      <td>marketing</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>e-comerce</td>\n",
       "      <td>marketing</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>marketin</td>\n",
       "      <td>marketing</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>314</th>\n",
       "      <td>pensamiento logico</td>\n",
       "      <td>Logistica</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>315</th>\n",
       "      <td>agro</td>\n",
       "      <td>Agro</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>316</th>\n",
       "      <td>agronegocios</td>\n",
       "      <td>Agro</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>317</th>\n",
       "      <td>agricultura</td>\n",
       "      <td>Agro</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>318</th>\n",
       "      <td>ganaderia</td>\n",
       "      <td>Agro</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>319 rows × 306 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "              sinonimos   carreras  accionistas  acercar  administracion  \\\n",
       "0         mercadotecnia  marketing          0.0      0.0             0.0   \n",
       "1              mercadeo  marketing          0.0      0.0             0.0   \n",
       "2             comercial  marketing          0.0      0.0             0.0   \n",
       "3             e-comerce  marketing          0.0      0.0             0.0   \n",
       "4              marketin  marketing          0.0      0.0             0.0   \n",
       "..                  ...        ...          ...      ...             ...   \n",
       "314  pensamiento logico  Logistica          0.0      0.0             0.0   \n",
       "315                agro       Agro          0.0      0.0             0.0   \n",
       "316        agronegocios       Agro          0.0      0.0             0.0   \n",
       "317         agricultura       Agro          0.0      0.0             0.0   \n",
       "318           ganaderia       Agro          0.0      0.0             0.0   \n",
       "\n",
       "     administrar  aduana  agricultura  agro  agronegocios  ...  ventas  \\\n",
       "0            0.0     0.0          0.0   0.0           0.0  ...     0.0   \n",
       "1            0.0     0.0          0.0   0.0           0.0  ...     0.0   \n",
       "2            0.0     0.0          0.0   0.0           0.0  ...     0.0   \n",
       "3            0.0     0.0          0.0   0.0           0.0  ...     0.0   \n",
       "4            0.0     0.0          0.0   0.0           0.0  ...     0.0   \n",
       "..           ...     ...          ...   ...           ...  ...     ...   \n",
       "314          0.0     0.0          0.0   0.0           0.0  ...     0.0   \n",
       "315          0.0     0.0          0.0   1.0           0.0  ...     0.0   \n",
       "316          0.0     0.0          0.0   0.0           1.0  ...     0.0   \n",
       "317          0.0     0.0          1.0   0.0           0.0  ...     0.0   \n",
       "318          0.0     0.0          0.0   0.0           0.0  ...     0.0   \n",
       "\n",
       "     viajar  viaje  viajes  videojuegos  vinculo  virtual  visibilidad  \\\n",
       "0       0.0    0.0     0.0          0.0      0.0      0.0          0.0   \n",
       "1       0.0    0.0     0.0          0.0      0.0      0.0          0.0   \n",
       "2       0.0    0.0     0.0          0.0      0.0      0.0          0.0   \n",
       "3       0.0    0.0     0.0          0.0      0.0      0.0          0.0   \n",
       "4       0.0    0.0     0.0          0.0      0.0      0.0          0.0   \n",
       "..      ...    ...     ...          ...      ...      ...          ...   \n",
       "314     0.0    0.0     0.0          0.0      0.0      0.0          0.0   \n",
       "315     0.0    0.0     0.0          0.0      0.0      0.0          0.0   \n",
       "316     0.0    0.0     0.0          0.0      0.0      0.0          0.0   \n",
       "317     0.0    0.0     0.0          0.0      0.0      0.0          0.0   \n",
       "318     0.0    0.0     0.0          0.0      0.0      0.0          0.0   \n",
       "\n",
       "     visual  visuales  \n",
       "0       0.0       0.0  \n",
       "1       0.0       0.0  \n",
       "2       0.0       0.0  \n",
       "3       0.0       0.0  \n",
       "4       0.0       0.0  \n",
       "..      ...       ...  \n",
       "314     0.0       0.0  \n",
       "315     0.0       0.0  \n",
       "316     0.0       0.0  \n",
       "317     0.0       0.0  \n",
       "318     0.0       0.0  \n",
       "\n",
       "[319 rows x 306 columns]"
      ]
     },
     "execution_count": 247,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_final=df_original.join(df_X_Tfidf)\n",
    "df_final"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 248,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn import linear_model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 249,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn import linear_model\n",
    "modelo=linear_model.LogisticRegression(max_iter= 1000,penalty='none',fit_intercept=True, random_state=123)\n",
    "\n",
    "cantidad_folds=10"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 250,
   "metadata": {},
   "outputs": [],
   "source": [
    "#df_X_Tfidf.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 251,
   "metadata": {},
   "outputs": [],
   "source": [
    "X=df_final.drop(axis=1,columns=['carreras','sinonimos'])\n",
    "y=df_final['carreras']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 252,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.20,random_state=123)\n",
    "#X_train=X\n",
    "#y_train=y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 253,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Modelo: Regresión Logística con Regularización Ridge\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Admins\\anaconda3\\lib\\site-packages\\sklearn\\model_selection\\_split.py:667: UserWarning: The least populated class in y has only 3 members, which is less than n_splits=5.\n",
      "  % (min_groups, self.n_splits)), UserWarning)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "---------------------------------------------------------\n",
      "Regularización C:  1e-06 AC=  0.2156862745098039  +/-  0.06075267994050852  (95%)\n",
      "---------------------------------------------------------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Admins\\anaconda3\\lib\\site-packages\\sklearn\\model_selection\\_split.py:667: UserWarning: The least populated class in y has only 3 members, which is less than n_splits=5.\n",
      "  % (min_groups, self.n_splits)), UserWarning)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "---------------------------------------------------------\n",
      "Regularización C:  1e-05 AC=  0.21960784313725487  +/-  0.07604203697907969  (95%)\n",
      "---------------------------------------------------------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Admins\\anaconda3\\lib\\site-packages\\sklearn\\model_selection\\_split.py:667: UserWarning: The least populated class in y has only 3 members, which is less than n_splits=5.\n",
      "  % (min_groups, self.n_splits)), UserWarning)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "---------------------------------------------------------\n",
      "Regularización C:  0.0001 AC=  0.21960784313725487  +/-  0.07604203697907969  (95%)\n",
      "---------------------------------------------------------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Admins\\anaconda3\\lib\\site-packages\\sklearn\\model_selection\\_split.py:667: UserWarning: The least populated class in y has only 3 members, which is less than n_splits=5.\n",
      "  % (min_groups, self.n_splits)), UserWarning)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "---------------------------------------------------------\n",
      "Regularización C:  0.001 AC=  0.21960784313725487  +/-  0.07604203697907969  (95%)\n",
      "---------------------------------------------------------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Admins\\anaconda3\\lib\\site-packages\\sklearn\\model_selection\\_split.py:667: UserWarning: The least populated class in y has only 3 members, which is less than n_splits=5.\n",
      "  % (min_groups, self.n_splits)), UserWarning)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "---------------------------------------------------------\n",
      "Regularización C:  0.01 AC=  0.21960784313725487  +/-  0.07604203697907969  (95%)\n",
      "---------------------------------------------------------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Admins\\anaconda3\\lib\\site-packages\\sklearn\\model_selection\\_split.py:667: UserWarning: The least populated class in y has only 3 members, which is less than n_splits=5.\n",
      "  % (min_groups, self.n_splits)), UserWarning)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "---------------------------------------------------------\n",
      "Regularización C:  0.1 AC=  0.2549019607843137  +/-  0.049604355453621636  (95%)\n",
      "---------------------------------------------------------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Admins\\anaconda3\\lib\\site-packages\\sklearn\\model_selection\\_split.py:667: UserWarning: The least populated class in y has only 3 members, which is less than n_splits=5.\n",
      "  % (min_groups, self.n_splits)), UserWarning)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "---------------------------------------------------------\n",
      "Regularización C:  1 AC=  0.39215686274509803  +/-  0.0701511522352875  (95%)\n",
      "---------------------------------------------------------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Admins\\anaconda3\\lib\\site-packages\\sklearn\\model_selection\\_split.py:667: UserWarning: The least populated class in y has only 3 members, which is less than n_splits=5.\n",
      "  % (min_groups, self.n_splits)), UserWarning)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "---------------------------------------------------------\n",
      "Regularización C:  10 AC=  0.5098039215686275  +/-  0.10811018629090367  (95%)\n",
      "---------------------------------------------------------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Admins\\anaconda3\\lib\\site-packages\\sklearn\\model_selection\\_split.py:667: UserWarning: The least populated class in y has only 3 members, which is less than n_splits=5.\n",
      "  % (min_groups, self.n_splits)), UserWarning)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "---------------------------------------------------------\n",
      "Regularización C:  100 AC=  0.5294117647058824  +/-  0.06562039423796674  (95%)\n",
      "---------------------------------------------------------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Admins\\anaconda3\\lib\\site-packages\\sklearn\\model_selection\\_split.py:667: UserWarning: The least populated class in y has only 3 members, which is less than n_splits=5.\n",
      "  % (min_groups, self.n_splits)), UserWarning)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "---------------------------------------------------------\n",
      "Regularización C:  1000.0 AC=  0.5098039215686274  +/-  0.08942552353718727  (95%)\n",
      "---------------------------------------------------------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Admins\\anaconda3\\lib\\site-packages\\sklearn\\model_selection\\_split.py:667: UserWarning: The least populated class in y has only 3 members, which is less than n_splits=5.\n",
      "  % (min_groups, self.n_splits)), UserWarning)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "---------------------------------------------------------\n",
      "Regularización C:  10000.0 AC=  0.4980392156862745  +/-  0.11527010554273778  (95%)\n",
      "---------------------------------------------------------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Admins\\anaconda3\\lib\\site-packages\\sklearn\\model_selection\\_split.py:667: UserWarning: The least populated class in y has only 3 members, which is less than n_splits=5.\n",
      "  % (min_groups, self.n_splits)), UserWarning)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "---------------------------------------------------------\n",
      "Regularización C:  100000.0 AC=  0.4901960784313726  +/-  0.1288758958835685  (95%)\n",
      "---------------------------------------------------------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Admins\\anaconda3\\lib\\site-packages\\sklearn\\model_selection\\_split.py:667: UserWarning: The least populated class in y has only 3 members, which is less than n_splits=5.\n",
      "  % (min_groups, self.n_splits)), UserWarning)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "---------------------------------------------------------\n",
      "Regularización C:  1000000.0 AC=  0.4784313725490196  +/-  0.15409319768147842  (95%)\n",
      "---------------------------------------------------------\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Admins\\anaconda3\\lib\\site-packages\\sklearn\\model_selection\\_split.py:667: UserWarning: The least populated class in y has only 3 members, which is less than n_splits=5.\n",
      "  % (min_groups, self.n_splits)), UserWarning)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "---------------------------------------------------------\n",
      "Regularización C:  10000000.0 AC=  0.4901960784313725  +/-  0.1264667882086047  (95%)\n",
      "---------------------------------------------------------\n"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import cross_validate\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "print(\"Modelo: Regresión Logística con Regularización Ridge\")\n",
    "\n",
    "for c in [1e-6,1e-5,1e-4,0.001,0.01,0.1,1,10,100,1e3,1e4,1e5,1e6,1e7]:\n",
    "    Log_Ridge=LogisticRegression(penalty='l2', C=c, max_iter=10000, tol=0.0001, multi_class='ovr')  \n",
    "    \n",
    "    scores_Log_Ridge = cross_validate(Log_Ridge, X_train, y_train, cv=5, scoring=['accuracy'])\n",
    "    AC=scores_Log_Ridge['test_accuracy'].mean()\n",
    "    desvio=scores_Log_Ridge['test_accuracy'].std()\n",
    "    print(\"---------------------------------------------------------\")\n",
    "    print(\"Regularización C: \", c, \"AC= \", AC, \" +/- \", 2*desvio, ' (95%)')\n",
    "    print(\"---------------------------------------------------------\")\n",
    "    \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 254,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LogisticRegression(C=100, class_weight=None, dual=False, fit_intercept=True,\n",
       "                   intercept_scaling=1, l1_ratio=None, max_iter=10000,\n",
       "                   multi_class='ovr', n_jobs=None, penalty='l2',\n",
       "                   random_state=None, solver='lbfgs', tol=0.0001, verbose=0,\n",
       "                   warm_start=False)"
      ]
     },
     "execution_count": 254,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "C_mejor=100\n",
    "modelo_produccion=LogisticRegression(penalty='l2', C=C_mejor, max_iter=10000, tol=0.0001, multi_class='ovr')\n",
    "modelo_produccion.fit(X, y)  # Entrenamos con .fit"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 255,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['Agro'], dtype=object)"
      ]
     },
     "execution_count": 255,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "nueva_oracion='quiero estudiar algo de agro'\n",
    "#Hay que vectorizarla:\n",
    "X_nueva_oracion = vectorizerTfidf.transform([nueva_oracion])\n",
    "#X_nueva_oracion\n",
    "\n",
    "# Pronosticamos:\n",
    "intencion_pronsticada=modelo_produccion.predict(X_nueva_oracion)\n",
    "intencion_pronsticada"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 256,
   "metadata": {},
   "outputs": [],
   "source": [
    "pickle.dump(vectorizerTfidf, open('vectorizer_carreras.sav', 'wb'))\n",
    "pickle.dump(modelo_produccion, open('ridge_carreras.sav', 'wb'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
